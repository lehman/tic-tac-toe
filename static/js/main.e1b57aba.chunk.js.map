{"version":3,"sources":["GameRestart.js","Settings.js","Square.js","Board.js","Game.js","index.js"],"names":["GameRestart","props","className","onClick","Settings","name","type","value","darkMode","onChange","onToggleDarkMode","min","max","rows","e","target","cols","onRestart","Square","win","Board","renderSquare","row","col","squares","board","boardRow","push","calculateWinner","playerCounts","winCount","winningPlayer","winningPathIndex","forEach","player","playerIndex","count","countIndex","Game","state","numCols","numRows","history","moveNumber","xIsNext","numPlayers","startingSquares","Array","i","j","move","fill","map","generateStartingState","bind","newRowDim","newColDim","parseInt","freshHistory","this","setState","document","body","allPlayerCounts","chosenRow","chosenCol","length","addMoveToCounts","latestBoardState","totalRows","totalCols","slice","current","JSON","parse","stringify","updateCounts","concat","fieldName","status","currentBoardState","markWinningSquares","moves","boardState","index","buttonText","jumpToMove","updateDimensions","handleClick","React","Component","ReactDOM","render","getElementById"],"mappings":"yUAUeA,MARf,SAAqBC,GACjB,OACI,qBAAKC,UAAWD,EAAMC,UAAtB,SACI,wBAAQC,QAASF,EAAME,QAAvB,6BCuCGC,MAxCf,SAAkBH,GACd,OACI,sBAAKC,UAAWD,EAAMC,UAAtB,UACI,sBAAKA,UAAU,UAAf,UACI,8CACA,uBACIG,KAAK,YACLC,KAAK,WACLC,MAAON,EAAMO,SACbC,SAAUR,EAAMS,sBAGxB,kDACA,sBAAKR,UAAU,UAAf,UACI,yCACA,uBACIG,KAAK,MACLC,KAAK,SACLK,IAAI,IACJC,IAAI,KACJL,MAAON,EAAMY,KACbJ,SAAU,SAACK,GAAD,OAAOb,EAAME,QAAQW,EAAEC,OAAOV,KAAMS,EAAEC,OAAOR,aAG/D,sBAAKL,UAAU,UAAf,UACI,4CACA,uBACIG,KAAK,MACLC,KAAK,SACLK,IAAI,IACJC,IAAI,KACJL,MAAON,EAAMe,KACbP,SAAU,SAACK,GAAD,OAAOb,EAAME,QAAQW,EAAEC,OAAOV,KAAMS,EAAEC,OAAOR,aAG/D,cAAC,EAAD,CAAaJ,QAASF,EAAMgB,UAAWf,UAAU,sB,YC5B9CgB,MARf,SAAgBjB,GACZ,OACI,wBAAQC,UAAS,iBAAYD,EAAMkB,IAAM,MAAQ,IAAMhB,QAASF,EAAME,QAAtE,SACKF,EAAMM,SC2BJa,EA7BD,SAACnB,GACX,SAASoB,EAAaC,EAAKC,GACvB,OACI,cAAC,EAAD,CACIhB,MAAON,EAAMuB,QAAQF,GAAKC,GAAKhB,MAE/BY,IAAKlB,EAAMuB,QAAQF,GAAKC,GAAKJ,IAC7BhB,QAAS,kBAAMF,EAAME,QAAQmB,EAAKC,KAFvB,EAAND,EAAUC,GAS3B,IAFA,IAAIE,EAAQ,GACRC,EAAW,GACNJ,EAAM,EAAGA,EAAMrB,EAAMY,KAAMS,IAAO,CACvC,IAAK,IAAIC,EAAM,EAAGA,EAAMtB,EAAMe,KAAMO,IAChCG,EAASC,KAAKN,EAAaC,EAAKC,IAEpCE,EAAME,KACF,qBAAKzB,UAAU,YAAf,SACKwB,GAD2BJ,IAIpCI,EAAW,GAGf,OAAO,qBAAKxB,UAAWD,EAAMC,UAAtB,SAAkCuB,KCzB7C,SAASG,EAAgBC,EAAcC,GACnC,IAAIX,EAAM,CAAEY,cAAe,KAAMC,iBAAkB,MASnD,OARA,YAAIH,GAAcI,SAAQ,SAACC,EAAQC,GAAT,OACtB,YAAID,GAAQD,SAAQ,SAACG,EAAOC,GACpBD,GAASN,IACTX,EAAM,CAAEY,cAAeI,EAAaH,iBAAkBK,UAK3DlB,E,IA2SImB,E,kDAvSX,WAAYrC,GAAQ,IAAD,uBACf,cAAMA,IACDsC,MAAQ,CACTC,QAAS,EACTC,QAAS,EACTX,SAAU,EACVY,QAAS,GACTC,WAAY,EACZC,SAAS,EACTC,WAAY,EACZhB,aAAc,GACdrB,UAAU,GAId,IADA,IAAIsC,EAAkB,IAAIC,MACjBC,EAAI,EAAGA,EAAI,EAAKT,MAAME,QAASO,IAAK,CACzCF,EAAgBnB,KAAK,IAAIoB,OACzB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKV,MAAMC,QAASS,IACpCH,EAAgBE,GAAGrB,KAAK,CAAEpB,MAAO,KAAMY,KAAK,IAIpD,EAAKoB,MAAMG,QAAQf,KAAK,CAAEH,QAASsB,EAAiBI,KAAM,OAS1D,IAAIrB,EAAekB,MAAM,EAAKR,MAAMM,YAC/BM,KAAK,GACLC,KAAI,SAAClB,GAAD,OAAY,IAAIa,MAAM,EAAKR,MAAME,QAAU,EAAKF,MAAMC,QAAU,GAAGW,KAAK,MAjClE,OAkCf,EAAKZ,MAAMV,aAAeA,EAE1B,EAAKwB,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBApCd,E,yDAuCnB,SAAsBC,EAAWC,GAM7B,IALA,IAAM3C,EAAO4C,SAASF,GAChBvC,EAAOyC,SAASD,GAElBE,EAAe,GACfZ,EAAkB,IAAIC,MACjBC,EAAI,EAAGA,EAAInC,EAAMmC,IAAK,CAC3BF,EAAgBnB,KAAK,IAAIoB,OACzB,IAAK,IAAIE,EAAI,EAAGA,EAAIjC,EAAMiC,IACtBH,EAAgBE,GAAGrB,KAAK,CAAEpB,MAAO,KAAMY,KAAK,IAIpDuC,EAAa/B,KAAK,CAAEH,QAASsB,EAAiBI,KAAM,OAQpD,IAAIrB,EAAekB,MAAMY,KAAKpB,MAAMM,YAC/BM,KAAK,GACLC,KAAI,SAAClB,GAAD,OAAY,IAAIa,MAAMlC,EAAOG,EAAO,GAAGmC,KAAK,MAErDQ,KAAKC,SAAS,CACV9B,SAAUyB,EACVb,QAASgB,EACTf,WAAY,EACZC,SAAS,EACTf,aAAcA,M,8BAItB,WAAoB,IAAD,OACf8B,KAAKC,SACD,CACIpD,UAAWmD,KAAKpB,MAAM/B,WAE1B,WACI,EAAK+B,MAAM/B,SAAYqD,SAASC,KAAK5D,UAAY,WAAe2D,SAASC,KAAK5D,UAAY,Q,6BAKtG,SAAgB6D,EAAiB7B,EAAQ8B,EAAWC,GAChD,IAAMpD,EAAO4C,SAASE,KAAKpB,MAAME,SAC3BzB,EAAOyC,SAASE,KAAKpB,MAAMC,SAGjCuB,EAAgB7B,GAAQ8B,KAGxBD,EAAgB7B,GAAQ+B,EAAYpD,KAGhCmD,GAAaC,GAEbF,EAAgB7B,GAAQrB,EAAOG,KAE/BgD,EAAYC,EAAY,GAAKN,KAAKpB,MAAME,SAExCsB,EAAgB7B,GAAQrB,EAAOG,EAAO,O,0BAI9C,SAAakB,EAAQ8B,EAAWC,GAC5B,IAAMpD,EAAO4C,SAASE,KAAKpB,MAAME,SAC3BzB,EAAOyC,SAASE,KAAKpB,MAAMC,SAGjC,GAAImB,KAAKpB,MAAMI,YAAcgB,KAAKpB,MAAMG,QAAQwB,OAAS,EAAG,CAExD,IAAIH,EAAkBJ,KAAKpB,MAAMV,aACjC8B,KAAKQ,gBAAgBJ,EAAiB7B,EAAQ8B,EAAWC,GACzDN,KAAKC,SAAS,CAAE/B,aAAckC,QAC3B,CASH,IANA,IAAIA,EAAkBhB,MAAMY,KAAKpB,MAAMM,YAClCM,KAAK,GACLC,KAAI,SAAClB,GAAD,OAAY,IAAIa,MAAMlC,EAAOG,EAAO,GAAGmC,KAAK,MAC/CiB,EAAmBT,KAAKpB,MAAMG,QAAQiB,KAAKpB,MAAMI,YAAYnB,QAE/DU,EAAS,EACJc,EAAI,EAAGA,EAAInC,EAAMmC,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIjC,EAAMiC,IAEc,MAAhCmB,EAAiBpB,GAAGC,GAAG1C,QAGa2B,EAAP,MAAjCkC,EAAiBpB,GAAGC,GAAG1C,MAA0B,EAAe,EAChEoD,KAAKQ,gBAAgBJ,EAAiB7B,EAAQc,EAAGC,IAKzDU,KAAKQ,gBAAgBJ,EAAiB7B,EAAQ8B,EAAWC,GACzDN,KAAKC,SAAS,CAAE/B,aAAckC,O,gCAItC,SAAmB/B,GACf,IAAMqC,EAAYZ,SAASE,KAAKpB,MAAME,SAChC6B,EAAYb,SAASE,KAAKpB,MAAMC,SAClChB,EAAUmC,KAAKpB,MAAMG,QAAQiB,KAAKpB,MAAMG,QAAQwB,OAAS,GAAG1C,QAAQ+C,QACxE,GAAIvC,EAAmBqC,EAEnB,IAAK,IAAI9C,EAAM,EAAGA,EAAM+C,EAAW/C,IAC/BC,EAAQQ,GAAkBT,GAAKJ,KAAM,OAEtC,GAAIa,EAAmBqC,EAAYC,EAEtC,IAAK,IAAIhD,EAAM,EAAGA,EAAM+C,EAAW/C,IAC/BE,EAAQF,GAAKU,EAAmBqC,GAAWlD,KAAM,OAElD,GAAIa,EAAmBqC,EAAYC,EAAY,EAElD,IAAK,IAAItB,EAAI,EAAGA,EAAIqB,EAAWrB,IAC3BxB,EAAQwB,GAAGA,GAAG7B,KAAM,OAIxB,IAAK,IAAI6B,EAAI,EAAGA,EAAIqB,EAAWrB,IAC3BxB,EAAQwB,GAAGqB,EAAY,EAAIrB,GAAG7B,KAAM,I,yBAKhD,SAAYG,EAAKC,GACb,IAAMmB,EAAUiB,KAAKpB,MAAMG,QAAQ6B,MAAM,EAAGZ,KAAKpB,MAAMI,WAAa,GAE9D6B,EAAU9B,EAAQA,EAAQwB,OAAS,GACrC1C,EAAUiD,KAAKC,MAAMD,KAAKE,UAAUH,EAAQhD,UAEhD,EAA4CI,EAAgB+B,KAAKpB,MAAMV,aAAc8B,KAAKpB,MAAMT,UAAxFC,EAAR,EAAQA,cAAR,EAAuBC,iBACvB,KACIR,EAAQF,GAAKC,GAAKhB,OACA,MAAjBwB,GAAyB4B,KAAKpB,MAAMI,YAAcgB,KAAKpB,MAAMG,QAAQwB,OAAS,GAFnF,CAOA1C,EAAQF,GAAKC,GAAKhB,MAAQoD,KAAKpB,MAAMK,QAAU,IAAM,IAErD,IAAMV,EAASyB,KAAKpB,MAAMK,QAAU,EAAI,EACxCe,KAAKiB,aAAa1C,EAAQZ,EAAKC,GAE/BoC,KAAKC,SAAS,CACVlB,QAASA,EAAQmC,OAAO,CACpB,CACIrD,QAASA,EACT0B,KAAM,CAAE5B,IAAKA,EAAKC,IAAKA,MAG/BqB,SAAUe,KAAKpB,MAAMK,QACrBD,WAAYgB,KAAKpB,MAAMI,WAAa,O,wBAI5C,SAAWK,GACPW,KAAKC,SAAS,CACVhB,QAASI,EAAI,IAAM,EACnBL,WAAYc,SAAST,O,8BAI7B,SAAiB8B,EAAWvE,GACxB,OAAQuE,GACJ,IAAK,MAQL,IAAK,MACDnB,KAAKC,SAAS,CACVnB,QAASlC,EACTiC,QAASjC,EACTuB,SAAUvB,IAEdoD,KAAKN,sBAAsB9C,EAAOA,M,oBAO9C,WAAU,IAMFwE,EANC,OAECrC,EAAUiB,KAAKpB,MAAMG,QACrBsC,EAAoBtC,EAAQiB,KAAKpB,MAAMI,YAE7C,EAA4Cf,EAAgB+B,KAAKpB,MAAMV,aAAc8B,KAAKpB,MAAMT,UAAxFC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,iBAEF,MAAjBD,GAAyB4B,KAAKpB,MAAMI,YAAcD,EAAQwB,OAAS,GACnEa,EAAM,UAAwB,IAAlBhD,EAAsB,IAAM,IAAlC,mBACN4B,KAAKsB,mBAAmBjD,IAExB+C,EADOpB,KAAKpB,MAAMI,aAAegB,KAAKpB,MAAME,QAAUkB,KAAKpB,MAAMC,QAC3D,eAEA,uBAAmBmB,KAAKpB,MAAMK,QAAU,IAAM,KAExD,IAAMsC,EAAQxC,EAAQU,KAAI,SAAC+B,EAAYC,GACnC,IAAMC,EAAuB,IAAVD,EAAc,mBAAd,sBAAkDA,GACrE,OACI,+BACI,wBACIlF,UAAS,UAAKkF,IAAU,EAAK7C,MAAMI,WAAa,eAAiB,IACjExC,QAAS,kBAAM,EAAKmF,WAAWF,IAFnC,SAIKC,IAEL,4BAAIF,EAAWjC,KAAX,WAAsBiC,EAAWjC,KAAK5B,IAAM,EAA5C,aAAkD6D,EAAWjC,KAAK3B,IAAM,EAAxE,KAA+E,OAP9E6D,MAYjB,OACI,sBAAKlF,UAAS,eAAUyD,KAAKpB,MAAM/B,SAAW,WAAa,IAA3D,UACI,sBAAKN,UAAU,QAAf,UACI,qCACA,qCACA,wCAEJ,cAAC,EAAD,CACIW,KAAM8C,KAAKpB,MAAME,QACjBzB,KAAM2C,KAAKpB,MAAMC,QACjBrC,QAAS,SAAC2E,EAAWvE,GAAZ,OAAsB,EAAKgF,iBAAiBT,EAAWvE,IAChEU,UAAW,kBAAM,EAAKoC,sBAAsB,EAAKd,MAAME,QAAS,EAAKF,MAAMC,UAC3EtC,UAAU,gBACVM,SAAUmD,KAAKpB,MAAM/B,SACrBE,iBAAkB,kBAAM,EAAKA,sBAEjC,qBAAKR,UAAU,SAAf,SAAyB6E,IACzB,qBAAK7E,UAAU,aAAf,SAEI,cAAC,EAAD,CACIW,KAAM8C,KAAKpB,MAAME,QACjBzB,KAAM2C,KAAKpB,MAAMC,QACjBhB,QAASwD,EAAkBxD,QAC3BrB,QAAS,SAACmB,EAAKC,GAAN,OAAc,EAAKiE,YAAYlE,EAAKC,IAC7CrB,UAAU,iBAGlB,sBAAKA,UAAU,eAAf,UACI,yCACA,6BAAKgF,c,GAjSNO,IAAMC,WCbzBC,IAASC,OAAO,cAAC,EAAD,IAAe/B,SAASgC,eAAe,W","file":"static/js/main.e1b57aba.chunk.js","sourcesContent":["import React from 'react';\n\nfunction GameRestart(props) {\n    return (\n        <div className={props.className}>\n            <button onClick={props.onClick}>Restart Game</button>\n        </div>\n    );\n}\n\nexport default GameRestart;\n","import React from 'react';\nimport './Settings.css';\nimport GameRestart from './GameRestart';\n\nfunction Settings(props) {\n    return (\n        <div className={props.className}>\n            <div className=\"setting\">\n                <label>Dark Mode</label>\n                <input\n                    name=\"dark-mode\"\n                    type=\"checkbox\"\n                    value={props.darkMode}\n                    onChange={props.onToggleDarkMode}\n                ></input>\n            </div>\n            <h2>Board Dimensions</h2>\n            <div className=\"setting\">\n                <label>Rows</label>\n                <input\n                    name=\"row\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"50\"\n                    value={props.rows}\n                    onChange={(e) => props.onClick(e.target.name, e.target.value)}\n                ></input>\n            </div>\n            <div className=\"setting\">\n                <label>Columns</label>\n                <input\n                    name=\"col\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"50\"\n                    value={props.cols}\n                    onChange={(e) => props.onClick(e.target.name, e.target.value)}\n                ></input>\n            </div>\n            <GameRestart onClick={props.onRestart} className=\"restartButton\"></GameRestart>\n        </div>\n    );\n}\n\nexport default Settings;\n","import React from 'react';\nimport './Square.css';\n\nfunction Square(props) {\n    return (\n        <button className={`square ${props.win ? 'win' : ''}`} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\n\nconst Board = (props) => {\n    function renderSquare(row, col) {\n        return (\n            <Square\n                value={props.squares[row][col].value}\n                key={row * 3 + col}\n                win={props.squares[row][col].win}\n                onClick={() => props.onClick(row, col)}\n            />\n        );\n    }\n\n    let board = [];\n    let boardRow = [];\n    for (let row = 0; row < props.rows; row++) {\n        for (let col = 0; col < props.cols; col++) {\n            boardRow.push(renderSquare(row, col));\n        }\n        board.push(\n            <div className=\"board-row\" key={row}>\n                {boardRow}\n            </div>,\n        );\n        boardRow = [];\n    }\n\n    return <div className={props.className}>{board}</div>;\n};\n\nexport default Board;\n","import React from 'react';\nimport './Game.css';\nimport Settings from './Settings';\nimport Board from './Board';\n\nfunction calculateWinner(playerCounts, winCount) {\n    let win = { winningPlayer: null, winningPathIndex: null };\n    [...playerCounts].forEach((player, playerIndex) =>\n        [...player].forEach((count, countIndex) => {\n            if (count >= winCount) {\n                win = { winningPlayer: playerIndex, winningPathIndex: countIndex };\n            }\n        }),\n    );\n\n    return win;\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numCols: 3,\n            numRows: 3,\n            winCount: 3,\n            history: [],\n            moveNumber: 0,\n            xIsNext: true,\n            numPlayers: 2,\n            playerCounts: [],\n            darkMode: false,\n        };\n\n        let startingSquares = new Array();\n        for (let i = 0; i < this.state.numRows; i++) {\n            startingSquares.push(new Array());\n            for (let j = 0; j < this.state.numCols; j++) {\n                startingSquares[i].push({ value: null, win: false });\n            }\n        }\n\n        this.state.history.push({ squares: startingSquares, move: null });\n\n        // this.state.history.push({\n        //     squares: Array(this.state.numRows)\n        //         .fill(0)\n        //         .map((row) => new Array(this.state.numCols).fill({ value: null, win: false })),\n        // });\n\n        // assuming perfectly square board\n        let playerCounts = Array(this.state.numPlayers)\n            .fill(0)\n            .map((player) => new Array(this.state.numRows + this.state.numCols + 2).fill(0));\n        this.state.playerCounts = playerCounts;\n\n        this.generateStartingState = this.generateStartingState.bind(this);\n    }\n\n    generateStartingState(newRowDim, newColDim) {\n        const rows = parseInt(newRowDim);\n        const cols = parseInt(newColDim);\n\n        let freshHistory = [];\n        let startingSquares = new Array();\n        for (let i = 0; i < rows; i++) {\n            startingSquares.push(new Array());\n            for (let j = 0; j < cols; j++) {\n                startingSquares[i].push({ value: null, win: false });\n            }\n        }\n\n        freshHistory.push({ squares: startingSquares, move: null });\n\n        // this.state.history.push({\n        //     squares: Array(this.state.numRows)\n        //         .fill(0)\n        //         .map((row) => new Array(this.state.numCols).fill({ value: null, win: false })),\n        // });\n\n        let playerCounts = Array(this.state.numPlayers)\n            .fill(0)\n            .map((player) => new Array(rows + cols + 2).fill(0));\n\n        this.setState({\n            winCount: newRowDim,\n            history: freshHistory,\n            moveNumber: 0,\n            xIsNext: true,\n            playerCounts: playerCounts,\n        });\n    }\n\n    onToggleDarkMode() {\n        this.setState(\n            {\n                darkMode: !this.state.darkMode,\n            },\n            () => {\n                this.state.darkMode ? (document.body.className = 'darkMode') : (document.body.className = '');\n            },\n        );\n    }\n\n    addMoveToCounts(allPlayerCounts, player, chosenRow, chosenCol) {\n        const rows = parseInt(this.state.numRows);\n        const cols = parseInt(this.state.numCols);\n\n        // update count for row the chosen move is in\n        allPlayerCounts[player][chosenRow]++;\n\n        // update count for column the chosen move is in\n        allPlayerCounts[player][chosenCol + rows]++;\n\n        // update count for diagonal the chosen move is in, if any\n        if (chosenRow == chosenCol) {\n            // on left to right, top to bottom diagonal\n            allPlayerCounts[player][rows + cols]++;\n        }\n        if (chosenRow + chosenCol + 1 == this.state.numRows) {\n            // on right to left, top to bottom diagonal\n            allPlayerCounts[player][rows + cols + 1]++;\n        }\n    }\n\n    updateCounts(player, chosenRow, chosenCol) {\n        const rows = parseInt(this.state.numRows);\n        const cols = parseInt(this.state.numCols);\n\n        // history always has extra entry for initial blank board state\n        if (this.state.moveNumber == this.state.history.length - 1) {\n            // we're adding a move to the end\n            let allPlayerCounts = this.state.playerCounts;\n            this.addMoveToCounts(allPlayerCounts, player, chosenRow, chosenCol);\n            this.setState({ playerCounts: allPlayerCounts });\n        } else {\n            // we jumped to a previous move in history and then made a new move,\n            // so we need to redo all the counts\n            let allPlayerCounts = Array(this.state.numPlayers)\n                .fill(0)\n                .map((player) => new Array(rows + cols + 2).fill(0));\n            const latestBoardState = this.state.history[this.state.moveNumber].squares;\n\n            let player = 0;\n            for (let i = 0; i < rows; i++) {\n                for (let j = 0; j < cols; j++) {\n                    // latestBoardState[i][j].value ?? continue;\n                    if (latestBoardState[i][j].value == null) {\n                        continue;\n                    }\n                    latestBoardState[i][j].value === 'X' ? (player = 0) : (player = 1);\n                    this.addMoveToCounts(allPlayerCounts, player, i, j);\n                }\n            }\n\n            // since state history doesn't have the most recent move, add that count here\n            this.addMoveToCounts(allPlayerCounts, player, chosenRow, chosenCol);\n            this.setState({ playerCounts: allPlayerCounts });\n        }\n    }\n\n    markWinningSquares(winningPathIndex) {\n        const totalRows = parseInt(this.state.numRows);\n        const totalCols = parseInt(this.state.numCols);\n        let squares = this.state.history[this.state.history.length - 1].squares.slice();\n        if (winningPathIndex < totalRows) {\n            // index is the row number, mark all squares in that row\n            for (let col = 0; col < totalCols; col++) {\n                squares[winningPathIndex][col].win = true;\n            }\n        } else if (winningPathIndex < totalRows + totalCols) {\n            // index specifies which col, mark all squares in that col\n            for (let row = 0; row < totalRows; row++) {\n                squares[row][winningPathIndex - totalRows].win = true;\n            }\n        } else if (winningPathIndex < totalRows + totalCols + 1) {\n            // mark all squares in diagonal going right to left, top to bottom\n            for (let i = 0; i < totalRows; i++) {\n                squares[i][i].win = true;\n            }\n        } else {\n            // mark all squares in diagonal going left to right, top to bottom\n            for (let i = 0; i < totalRows; i++) {\n                squares[i][totalRows - 1 - i].win = true;\n            }\n        }\n    }\n\n    handleClick(row, col) {\n        const history = this.state.history.slice(0, this.state.moveNumber + 1);\n        // const { ...current } = history;\n        const current = history[history.length - 1];\n        let squares = JSON.parse(JSON.stringify(current.squares));\n\n        const { winningPlayer, winningPathIndex } = calculateWinner(this.state.playerCounts, this.state.winCount);\n        if (\n            squares[row][col].value ||\n            (winningPlayer != null && this.state.moveNumber == this.state.history.length - 1)\n        ) {\n            return;\n        }\n\n        squares[row][col].value = this.state.xIsNext ? 'X' : 'O';\n\n        const player = this.state.xIsNext ? 0 : 1;\n        this.updateCounts(player, row, col);\n\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                    move: { row: row, col: col },\n                },\n            ]),\n            xIsNext: !this.state.xIsNext,\n            moveNumber: this.state.moveNumber + 1,\n        });\n    }\n\n    jumpToMove(i) {\n        this.setState({\n            xIsNext: i % 2 === 0,\n            moveNumber: parseInt(i),\n        });\n    }\n\n    updateDimensions(fieldName, value) {\n        switch (fieldName) {\n            case 'row':\n                this.setState({\n                    numRows: value,\n                    numCols: value,\n                    winCount: value,\n                });\n                this.generateStartingState(value, value);\n                break;\n            case 'col':\n                this.setState({\n                    numRows: value,\n                    numCols: value,\n                    winCount: value,\n                });\n                this.generateStartingState(value, value);\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        // const { ...currentBoardState } = this.state.history;\n        const history = this.state.history;\n        const currentBoardState = history[this.state.moveNumber];\n        // const winningPath = calculateWinner(currentBoardState.squares);\n        const { winningPlayer, winningPathIndex } = calculateWinner(this.state.playerCounts, this.state.winCount);\n        let status;\n        if (winningPlayer != null && this.state.moveNumber == history.length - 1) {\n            status = `${winningPlayer === 0 ? 'X' : 'O'} is the Winner!`;\n            this.markWinningSquares(winningPathIndex);\n        } else if (this.state.moveNumber === this.state.numRows * this.state.numCols) {\n            status = `It's a draw!`;\n        } else {\n            status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n        }\n        const moves = history.map((boardState, index) => {\n            const buttonText = index === 0 ? 'Go to game start' : `Go to move #${index}`;\n            return (\n                <li key={index}>\n                    <button\n                        className={`${index === this.state.moveNumber ? 'selectedMove' : ''}`}\n                        onClick={() => this.jumpToMove(index)}\n                    >\n                        {buttonText}\n                    </button>\n                    <p>{boardState.move ? `(${boardState.move.row + 1}, ${boardState.move.col + 1})` : ''}</p>\n                </li>\n            );\n        });\n\n        return (\n            <div className={`game ${this.state.darkMode ? 'darkMode' : ''}`}>\n                <div className=\"title\">\n                    <h1>Tic</h1>\n                    <h1>Tac</h1>\n                    <h1>Toe</h1>\n                </div>\n                <Settings\n                    rows={this.state.numRows}\n                    cols={this.state.numCols}\n                    onClick={(fieldName, value) => this.updateDimensions(fieldName, value)}\n                    onRestart={() => this.generateStartingState(this.state.numRows, this.state.numCols)}\n                    className=\"game-settings\"\n                    darkMode={this.state.darkMode}\n                    onToggleDarkMode={() => this.onToggleDarkMode()}\n                ></Settings>\n                <div className=\"status\">{status}</div>\n                <div className=\"game-field\">\n                    {/* <div className=\"status\">{status}</div> */}\n                    <Board\n                        rows={this.state.numRows}\n                        cols={this.state.numCols}\n                        squares={currentBoardState.squares}\n                        onClick={(row, col) => this.handleClick(row, col)}\n                        className=\"game-board\"\n                    />\n                </div>\n                <div className=\"game-history\">\n                    <h2>History</h2>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\n\nReactDOM.render(<Game></Game>, document.getElementById('root'));\n"],"sourceRoot":""}